#pragma once
/* clang-format off */
@SCALAR_TYPES_HEADERS@
#include <linalgwrap/Armadillo/ArmadilloMatrix.hh>
#include <linalgwrap/Base/Interfaces/MutableMemoryVector_i.hh>

namespace gint {
//
// Real and complex types
//
/** The real type used throughout gint */
using real_type = @SCALAR_TYPES_REAL@;

/** The complex type used throughout gint */
using complex_type = @SCALAR_TYPES_COMPLEX@;

//
// Real-valued operator
//
/** The set of types used for real-valued operators */
namespace real_valued {

/** The scalar type for real-valued operators */
using scalar_type = real_type;

/** The stored matrix type for real-valued operators */
using stored_matrix_type = linalgwrap::ArmadilloMatrix<real_type>;

/** The multivector type for real-valued operators */
using multivector_type = stored_matrix_type;

// TODO Temporary: Ideally we would like to use some MultiVector type for
//      the one above and the one below

/** The immutable multivector type for real-valued operators */
using const_multivector_type = stored_matrix_type;
}  // namespace real_operator

//
// Complex-valued operator
//
/** The set of types used for complex-valued operators */
namespace complex_valued {

/** The scalar type for real-valued operators */
using scalar_type = complex_type;

/** The stored matrix type for real-valued operators */
using stored_matrix_type = linalgwrap::ArmadilloMatrix<complex_type>;

/** The multivector type for real-valued operators */
using multivector_type = stored_matrix_type;

// TODO Temporary: Ideally we would like to use some MultiVector type for
//      the one above and the one below

/** The immutable multivector type for real-valued operators */
using const_multivector_type = stored_matrix_type;
}  // namespace complex_operator

//
// Detail namespace
//
namespace detail {
// Directories:
constexpr const char* data_install_dir  = "@gint_DATA_INSTALL_DIR@";
constexpr const char* data_download_dir = "@gint_DATA_DOWNLOAD_DIR@";

// Version:
constexpr int version_major { @PROJECT_VERSION_MAJOR@ };
constexpr int version_minor { @PROJECT_VERSION_MINOR@ };
constexpr int version_patch { @PROJECT_VERSION_PATCH@ };
}  // namespace detail

//
// Definitions of features
//
#ifndef CXX_STANDARD
#define CXX_STANDARD @CMAKE_CXX_STANDARD@
#endif
#cmakedefine GINT_HAVE_CXX14
#cmakedefine GINT_HAVE_CXX17

#cmakedefine GINT_HAVE_STURMINT
#cmakedefine GINT_HAVE_LIBINT
#cmakedefine GINT_HAVE_STATIC_INTEGRALS

  /* clang-format on */
}  // namespace gint
