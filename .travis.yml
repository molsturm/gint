## ---------------------------------------------------------------------
##
## Copyright (C) 2017 by the gint authors
##
## This file is part of gint.
##
## gint is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## gint is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with gint. If not, see <http://www.gnu.org/licenses/>.
##
## ---------------------------------------------------------------------

language: cpp
sudo: required
dist: trusty

branches:
  except:
    - dev
    - /^dev-.*$/
    - /^dev_.*$/

env:
  global:
    # Use two threads in parallel
    - CORES=2
    #
    # Use a known-to-work rapidcheck seed
    - RC_PARAMS="seed=16920708173099178154 verbose_progress=1 noshrink=1"
    #
    # The regex for tests to run (disable running tests by TESTS=0)
    - TESTS=1  TESTS_REGEX="gint_tests_"


# Cache the directory cache_libint, such that libint does not need
# to be rebuild each time.
cache:
  directories:
    $HOME/cache_libint
before_cache:
  - cd ${TRAVIS_BUILD_DIR}
  - .travis/update_cached_libint.sh

addons:
  apt:
    sources: &def_sources
      - ubuntu-toolchain-r-test     # libstdc++-4.9-dev (gcc 4.8's libstdc++ is buggy)
      - llvm-toolchain-trusty-5.0   # clang-5.0
    packages: &def_packages
      - python3-pip
      - ninja-build
      #
      # Packages for lazyten
      - libarmadillo-dev
      - libboost-dev
      - liblapack-dev
      - libblas-dev
      #
      # Packages for libint
      - libeigen3-dev
      #
      # Packages for python interface
      - swig
      - python3-numpy

before_install:
  # Note: Using pip, i.e. python2 is on purpose, becase there were problems
  #       with python3
  - travis_retry pip install --user cpp-coveralls

matrix:
  include:
    # System clang with disabled c++14 support with libstdc++-4.9
    - addons:
        apt:
          sources: *def_sources
          packages:
            - *def_packages
            - libstdc++-4.9-dev
      install:
        # CMAKE_CXX_FLAGS="-DBOOST_PP_VARIADICS=1" is required because the
        # variadic macro check built into the current version of boost is not working
        - export EXTRA_OPTS="-DDRB_MAXIMUM_CXX_STANDARD=11 -DCMAKE_CXX_FLAGS='-DBOOST_PP_VARIADICS=1'"
        - export GCOV="llvm-cov gcov"
      compiler: clang
      # CXXFLAGS="-DBOOST_PP_VARIADICS=1" is required because the
      # variadic macro check built into the current version of boost is not working
      env: CC_COMP="clang" CXX_COMP="clang++" CXXFLAGS="-DBOOST_PP_VARIADICS=1"
    #
    # Clang 5.0 with libc++-1 and disabled c++17 support
    - addons:
        apt:
          sources: *def_sources
          packages:
            - *def_packages
            - &clang_newest [ clang-5.0, libc++-dev, llvm-5.0, clang-tidy-5.0 ]
      install:
        # CMAKE_CXX_FLAGS="-DBOOST_PP_VARIADICS=1" is required because the
        # variadic macro check built into the current version of boost is not working
        - export EXTRA_OPTS="-DDRB_MAXIMUM_CXX_STANDARD=14 -DCMAKE_CXX_FLAGS='-DBOOST_PP_VARIADICS=1'"
        - export GCOV="llvm-cov-5.0 gcov"
      compiler: clang
      # CXXFLAGS="-DBOOST_PP_VARIADICS=1" is required because the
      # variadic macro check built into the current version of boost is not working
      env: CC_COMP="clang-5.0" CXX_COMP="clang++-5.0" CXXFLAGS="-DBOOST_PP_VARIADICS=1"
    #
    # gcc-5
    - addons:
        apt:
          sources: *def_sources
          packages:
            - *def_packages
            - g++-5
      compiler: gcc
      env: CC_COMP="gcc-5" CXX_COMP="g++-5"
    #
    # gcc-7 (with tests and c++17)
    - addons:
        apt:
          sources: *def_sources
          packages:
            - *def_packages
            - g++-7
      install:
        - export GCOV="gcov-7"
      compiler: gcc
      env: CC_COMP="gcc-7" CXX_COMP="g++-7"
    #
    # Clang-tidy 5.0
    - addons:
        apt:
          sources: *def_sources
          packages:
            - *def_packages
            - *clang_newest
      install:
        # Install yaml for the python scripts generated by SetupClangTargets.cmake
        - travis_retry pip3 install --user pyyaml
        - export BUILD_TARGET="clang-tidy-gint"
        - export TESTS=0
      compiler: clang
      env: CC_COMP="clang-5.0" CXX_COMP="clang++-5.0" BUILD_TARGET="clang-tidy-gint"
  allow_failures:
    - env: CC_COMP="clang-5.0" CXX_COMP="clang++-5.0" BUILD_TARGET="clang-tidy-gint"

script:
  - cmake --version
  - ninja --version
  #
  # Use libint from cache if available
  - if [ -e "$HOME/cache_libint/lib/libint2.a" ]; then
        LIBINT_OPTS="-DGINT_LIBINT_USE_SYSTEM=ON
           -DLIBINT_INCLUDE_DIR=$HOME/cache_libint/include
           -DLIBINT_LIBRARY=$HOME/cache_libint/lib/libint2.a"
    ;else
        LIBINT_OPTS="-DGINT_LIBINT_MAX_AM=3 -DDEP_BUILD_libint_NJOBS=2
           -DGINT_LIBINT_MAX_MULTIPOLE=2"
    ;fi
  #
  # Configure build and test
  - mkdir ${TRAVIS_BUILD_DIR}/build && cd ${TRAVIS_BUILD_DIR}/build
  - cmake -DCMAKE_CXX_COMPILER=${CXX_COMP} -DCMAKE_C_COMPILER=${CC_COMP}
           -DCMAKE_BUILD_TYPE=DebugRelease ${EXTRA_OPTS}
           -DDRB_COVERAGE_Debug=ON
           -DAUTOCHECKOUT_MISSING_REPOS=ON
           -DRC_ENABLE_TESTS=OFF
           -DKRIMS_ENABLE_TESTS=OFF -DKRIMS_ENABLE_EXAMPLES=OFF
           -DLAZYTEN_ENABLE_TESTS=OFF -DLAZYTEN_ENABLE_EXAMPLES=OFF
           -DGINT_ENABLE_STATIC_INTEGRALS=ON
           -DGINT_ENABLE_LIBCINT=ON
           -DGINT_ENABLE_LIBINT=ON ${LIBINT_OPTS}
           -GNinja ..
  - travis_wait 20 cmake --build  . --target ${BUILD_TARGET:-all} -- -j ${CORES}
  - if [ "${TESTS}" != "0" ]; then
        ctest -j ${CORES} --output-on-failure -R "${TESTS_REGEX}"
    ;else true; fi

after_success:
  - cd ${TRAVIS_BUILD_DIR}
  - if [ "${GCOV}" ]; then coveralls --gcov "$GCOV" --gcov-options '\-lp'
           --root ${PWD} --build-root ${PWD}/build
           --include src/gint
    ;fi
