## ---------------------------------------------------------------------
##
## Copyright (C) 2017 the gint authors
##
## This file is licenced under the GNU General Public License
## version 3. See the other files the gint project for more details.
##
## This file is automatically generated. Do not edit directly.
## Instead edit the generator script "_generate_shell_expressions.py"
##
## ---------------------------------------------------------------------

import numpy as np

def normalisation_cartesian_gaussians(l, zeta):
  norm=None
  if l == 0:
    norm = 2**(3/4)*zeta**(3/4)/np.pi**(3/4)
  elif l == 1:
    norm = 2*2**(3/4)*zeta**(5/4)/np.pi**(3/4)
  elif l == 2:
    norm = 4*2**(3/4)*np.sqrt(3)*zeta**(7/4)/(3*np.pi**(3/4))
  elif l == 3:
    norm = 8*np.sqrt(15)*2**(3/4)*zeta**(9/4)/(15*np.pi**(3/4))
  elif l == 4:
    norm = 16*np.sqrt(105)*2**(3/4)*zeta**(11/4)/(105*np.pi**(3/4))
  elif l == 5:
    norm = 32*np.sqrt(105)*2**(3/4)*zeta**(13/4)/(315*np.pi**(3/4))
  elif l == 6:
    norm = 64*np.sqrt(1155)*2**(3/4)*zeta**(15/4)/(3465*np.pi**(3/4))
  elif l == 7:
    norm = 128*np.sqrt(15015)*2**(3/4)*zeta**(17/4)/(45045*np.pi**(3/4))
  else:
    raise NotImplementedError("Only cartesian gaussians up to l==7 are implemented.")
  return norm


def angular_pack_pure_gaussian(l, x, y, z, r, theta, phi):
  angular=None
  if l == 0:
    angular=[
        2**(3/4)/np.pi**(3/4),
    ]
  elif l == 1:
    angular=[
        -2*2**(3/4)*y/np.pi**(3/4),
        2*2**(3/4)*z/np.pi**(3/4),
        -2*2**(3/4)*x/np.pi**(3/4),
    ]
  elif l == 2:
    angular=[
        -2*2**(3/4)*r**2*np.sin(theta)**2*np.sin(2*phi)/np.pi**(3/4),
        2**(3/4)*r**2*(-np.cos(2*theta - phi) + np.cos(2*theta + phi))/np.pi**(3/4),
        2**(3/4)*np.sqrt(3)*r**2*(2*np.cos(theta)**2 - 2/3)/np.pi**(3/4),
        -2**(3/4)*r**2*(np.sin(2*theta - phi) + np.sin(2*theta + phi))/np.pi**(3/4),
        2*2**(3/4)*r**2*np.sin(theta)**2*np.cos(2*phi)/np.pi**(3/4),
    ]
  elif l == 3:
    angular=[
        -4*2**(1/4)*np.sqrt(3)*r**3*np.sin(theta)**3*np.sin(3*phi)/(3*np.pi**(3/4)),
        -4*2**(3/4)*r**2*z*np.sin(theta)**2*np.sin(2*phi)/np.pi**(3/4),
        -4*2**(1/4)*np.sqrt(5)*r**2*y*(5*np.cos(theta)**2 - 1)/(5*np.pi**(3/4)),
        4*np.sqrt(15)*2**(3/4)*r**2*z*(5*np.cos(theta)**2 - 3)/(15*np.pi**(3/4)),
        -4*2**(1/4)*np.sqrt(5)*r**2*x*(5*np.cos(theta)**2 - 1)/(5*np.pi**(3/4)),
        4*2**(3/4)*r**2*z*np.sin(theta)**2*np.cos(2*phi)/np.pi**(3/4),
        -4*2**(1/4)*np.sqrt(3)*r**3*np.sin(theta)**3*np.cos(3*phi)/(3*np.pi**(3/4)),
    ]
  elif l == 4:
    angular=[
        -2*2**(3/4)*np.sqrt(3)*r**4*np.sin(theta)**4*np.sin(4*phi)/(3*np.pi**(3/4)),
        -8*2**(1/4)*np.sqrt(3)*r**3*z*np.sin(theta)**3*np.sin(3*phi)/(3*np.pi**(3/4)),
        4*2**(3/4)*np.sqrt(21)*r**4*(7*np.sin(theta)**2 - 6)*np.sin(theta)**2*np.sin(2*phi)/(21*np.pi**(3/4)),
        -8*2**(1/4)*np.sqrt(21)*r**2*y*z*(7*np.cos(theta)**2 - 3)/(21*np.pi**(3/4)),
        2*np.sqrt(105)*2**(3/4)*r**4*(35*np.cos(theta)**4 - 30*np.cos(theta)**2 + 3)/(105*np.pi**(3/4)),
        -8*2**(1/4)*np.sqrt(21)*r**2*x*z*(7*np.cos(theta)**2 - 3)/(21*np.pi**(3/4)),
        -4*2**(3/4)*np.sqrt(21)*r**4*(7*np.sin(theta)**2 - 6)*np.sin(theta)**2*np.cos(2*phi)/(21*np.pi**(3/4)),
        -8*2**(1/4)*np.sqrt(3)*r**3*z*np.sin(theta)**3*np.cos(3*phi)/(3*np.pi**(3/4)),
        2*2**(3/4)*np.sqrt(3)*r**4*np.sin(theta)**4*np.cos(4*phi)/(3*np.pi**(3/4)),
    ]
  elif l == 5:
    angular=[
        -4*np.sqrt(15)*2**(1/4)*r**5*np.sin(theta)**5*np.sin(5*phi)/(15*np.pi**(3/4)),
        -4*2**(3/4)*np.sqrt(3)*r**4*z*np.sin(theta)**4*np.sin(4*phi)/(3*np.pi**(3/4)),
        -4*2**(1/4)*np.sqrt(3)*r**5*(9*np.cos(theta)**2 - 1)*np.sin(theta)**3*np.sin(3*phi)/(9*np.pi**(3/4)),
        8*2**(3/4)*r**4*z*(3*np.sin(theta)**2 - 2)*np.sin(theta)**2*np.sin(2*phi)/(3*np.pi**(3/4)),
        -4*2**(3/4)*np.sqrt(7)*r**4*y*(21*np.cos(theta)**4 - 14*np.cos(theta)**2 + 1)/(21*np.pi**(3/4)),
        4*np.sqrt(105)*2**(3/4)*r**4*z*(63*np.cos(theta)**4 - 70*np.cos(theta)**2 + 15)/(315*np.pi**(3/4)),
        -4*2**(3/4)*np.sqrt(7)*r**4*x*(21*np.cos(theta)**4 - 14*np.cos(theta)**2 + 1)/(21*np.pi**(3/4)),
        -8*2**(3/4)*r**4*z*(3*np.sin(theta)**2 - 2)*np.sin(theta)**2*np.cos(2*phi)/(3*np.pi**(3/4)),
        -4*2**(1/4)*np.sqrt(3)*r**5*(9*np.cos(theta)**2 - 1)*np.sin(theta)**3*np.cos(3*phi)/(9*np.pi**(3/4)),
        4*2**(3/4)*np.sqrt(3)*r**4*z*np.sin(theta)**4*np.cos(4*phi)/(3*np.pi**(3/4)),
        -4*np.sqrt(15)*2**(1/4)*r**5*np.sin(theta)**5*np.cos(5*phi)/(15*np.pi**(3/4)),
    ]
  elif l == 6:
    angular=[
        -4*2**(1/4)*np.sqrt(5)*r**6*np.sin(theta)**6*np.sin(6*phi)/(15*np.pi**(3/4)),
        -8*np.sqrt(15)*2**(1/4)*r**5*z*np.sin(theta)**5*np.sin(5*phi)/(15*np.pi**(3/4)),
        -4*np.sqrt(165)*2**(3/4)*r**6*(11*np.cos(theta)**2 - 1)*np.sin(theta)**4*np.sin(4*phi)/(165*np.pi**(3/4)),
        -8*np.sqrt(11)*2**(1/4)*r**5*z*(11*np.cos(theta)**2 - 3)*np.sin(theta)**3*np.sin(3*phi)/(33*np.pi**(3/4)),
        -4*np.sqrt(11)*2**(1/4)*r**6*(33*np.sin(theta)**4 - 48*np.sin(theta)**2 + 16)*np.sin(theta)**2*np.sin(2*phi)/(33*np.pi**(3/4)),
        -8*2**(3/4)*np.sqrt(55)*r**4*y*z*(33*np.cos(theta)**4 - 30*np.cos(theta)**2 + 5)/(165*np.pi**(3/4)),
        4*np.sqrt(1155)*2**(3/4)*r**6*(231*np.cos(theta)**6 - 315*np.cos(theta)**4 + 105*np.cos(theta)**2 - 5)/(3465*np.pi**(3/4)),
        -8*2**(3/4)*np.sqrt(55)*r**4*x*z*(33*np.cos(theta)**4 - 30*np.cos(theta)**2 + 5)/(165*np.pi**(3/4)),
        4*np.sqrt(11)*2**(1/4)*r**6*(33*np.sin(theta)**4 - 48*np.sin(theta)**2 + 16)*np.sin(theta)**2*np.cos(2*phi)/(33*np.pi**(3/4)),
        -8*np.sqrt(11)*2**(1/4)*r**5*z*(11*np.cos(theta)**2 - 3)*np.sin(theta)**3*np.cos(3*phi)/(33*np.pi**(3/4)),
        4*np.sqrt(165)*2**(3/4)*r**6*(11*np.cos(theta)**2 - 1)*np.sin(theta)**4*np.cos(4*phi)/(165*np.pi**(3/4)),
        -8*np.sqrt(15)*2**(1/4)*r**5*z*np.sin(theta)**5*np.cos(5*phi)/(15*np.pi**(3/4)),
        4*2**(1/4)*np.sqrt(5)*r**6*np.sin(theta)**6*np.cos(6*phi)/(15*np.pi**(3/4)),
    ]
  elif l == 7:
    angular=[
        -4*2**(3/4)*np.sqrt(35)*r**7*np.sin(theta)**7*np.sin(7*phi)/(105*np.pi**(3/4)),
        -8*2**(1/4)*np.sqrt(5)*r**6*z*np.sin(theta)**6*np.sin(6*phi)/(15*np.pi**(3/4)),
        -4*2**(3/4)*np.sqrt(65)*r**7*(13*np.cos(theta)**2 - 1)*np.sin(theta)**5*np.sin(5*phi)/(195*np.pi**(3/4)),
        -8*2**(3/4)*np.sqrt(65)*r**6*z*(13*np.cos(theta)**2 - 3)*np.sin(theta)**4*np.sin(4*phi)/(195*np.pi**(3/4)),
        -4*2**(3/4)*np.sqrt(715)*r**7*(143*np.cos(theta)**4 - 66*np.cos(theta)**2 + 3)*np.sin(theta)**3*np.sin(3*phi)/(2145*np.pi**(3/4)),
        -8*2**(1/4)*np.sqrt(715)*r**6*z*(143*np.sin(theta)**4 - 176*np.sin(theta)**2 + 48)*np.sin(theta)**2*np.sin(2*phi)/(2145*np.pi**(3/4)),
        -4*2**(3/4)*np.sqrt(2145)*r**6*y*(429*np.cos(theta)**6 - 495*np.cos(theta)**4 + 135*np.cos(theta)**2 - 5)/(6435*np.pi**(3/4)),
        8*np.sqrt(15015)*2**(3/4)*r**6*z*(429*np.cos(theta)**6 - 693*np.cos(theta)**4 + 315*np.cos(theta)**2 - 35)/(45045*np.pi**(3/4)),
        -4*2**(3/4)*np.sqrt(2145)*r**6*x*(429*np.cos(theta)**6 - 495*np.cos(theta)**4 + 135*np.cos(theta)**2 - 5)/(6435*np.pi**(3/4)),
        8*2**(1/4)*np.sqrt(715)*r**6*z*(143*np.sin(theta)**4 - 176*np.sin(theta)**2 + 48)*np.sin(theta)**2*np.cos(2*phi)/(2145*np.pi**(3/4)),
        -4*2**(3/4)*np.sqrt(715)*r**7*(143*np.cos(theta)**4 - 66*np.cos(theta)**2 + 3)*np.sin(theta)**3*np.cos(3*phi)/(2145*np.pi**(3/4)),
        8*2**(3/4)*np.sqrt(65)*r**6*z*(13*np.cos(theta)**2 - 3)*np.sin(theta)**4*np.cos(4*phi)/(195*np.pi**(3/4)),
        -4*2**(3/4)*np.sqrt(65)*r**7*(13*np.cos(theta)**2 - 1)*np.sin(theta)**5*np.cos(5*phi)/(195*np.pi**(3/4)),
        8*2**(1/4)*np.sqrt(5)*r**6*z*np.sin(theta)**6*np.cos(6*phi)/(15*np.pi**(3/4)),
        -4*2**(3/4)*np.sqrt(35)*r**7*np.sin(theta)**7*np.cos(7*phi)/(105*np.pi**(3/4)),
    ]
  else:
    raise NotImplementedError("Only pure gaussians up to l==7 are implemented.")
  return angular


